#!/usr/bin/env node

/**
 * Module dependencies.
 */
var WebSocket = require('websocket').server;
var app = require('../app');
var debug = require('debug')('sample:server');
var http = require('http');
const { json } = require('express');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);
console.log("Listening at port: ", port);
/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/************************** chat-app **************************/
console.log('chat-app')
var WS = new WebSocket({'httpServer': server,'path': '/chat'});

var CLIENTS = {};
var CLIENTS_ARR = [];

WS.on('request', (req)=>{
  console.log('request-came');
  var conn = req.accept(null, req.origin);

  conn.on('message', (msg)=> {
      console.log("[received] : ", msg);
      var obj = JSON.parse(msg.utf8Data);
      console.log("obj: ", obj);
      if(obj.status === 1){
        CLIENTS[obj.id] = conn;
        CLIENTS_ARR.push(conn);
        console.log('added- ', obj.id);
      }
      else sendMessageToClient(obj);
    })
    conn.on('close', msg => {
        // console.log(conn.closeDescription)
        console.log("bye-bye ", msg);
    })
});

const sendMessageToClient = (obj)=>{
  console.log("clients connected: ", CLIENTS_ARR.length, " obj: ", obj);
  var from = obj.from; var to = obj.to; var msg = obj.msg; 
  // if(CLIENTS[from]==null) console.log(from," id null");
  // else console.log('from status: ', CLIENTS[from].connected);

  // if(CLIENTS[to]==null) console.log(to," id null");
  // else console.log('to status: ', CLIENTS[to].connected);

  if(CLIENTS[to] == null && CLIENTS[from] !== null ){
    CLIENTS[from].send("[SERVER]: Your friend isn\'t connected");
  } 
  else{
    if(CLIENTS[to].connected) CLIENTS[to].send(msg);
    else if(CLIENTS[from] !== null) CLIENTS[from].send("[SERVER]: your friend is offline")
  }
  // console.log("client-usr: ", CLIENTS[usr].connected);
  // CLIENTS[usr].send("replying u back");
  // setTimeout(() => {
  //   sendMessageToClient(obj);
  // }, 1000);
};


/************************** chat-app **************************/